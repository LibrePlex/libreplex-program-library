/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

type ErrorWithCode = Error & { code: number }
type MaybeErrorWithCode = ErrorWithCode | null | undefined

const createErrorFromCodeLookup: Map<number, () => ErrorWithCode> = new Map()
const createErrorFromNameLookup: Map<string, () => ErrorWithCode> = new Map()

/**
 * InvalidBump: 'Bad bump'
 *
 * @category Errors
 * @category generated
 */
export class InvalidBumpError extends Error {
  readonly code: number = 0x1770
  readonly name: string = 'InvalidBump'
  constructor() {
    super('Bad bump')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidBumpError)
    }
  }
}

createErrorFromCodeLookup.set(0x1770, () => new InvalidBumpError())
createErrorFromNameLookup.set('InvalidBump', () => new InvalidBumpError())

/**
 * MissingBump: 'Missing bump'
 *
 * @category Errors
 * @category generated
 */
export class MissingBumpError extends Error {
  readonly code: number = 0x1771
  readonly name: string = 'MissingBump'
  constructor() {
    super('Missing bump')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, MissingBumpError)
    }
  }
}

createErrorFromCodeLookup.set(0x1771, () => new MissingBumpError())
createErrorFromNameLookup.set('MissingBump', () => new MissingBumpError())

/**
 * CannotRemoveVerifiedCreator: 'Cannot remove verified creator'
 *
 * @category Errors
 * @category generated
 */
export class CannotRemoveVerifiedCreatorError extends Error {
  readonly code: number = 0x1772
  readonly name: string = 'CannotRemoveVerifiedCreator'
  constructor() {
    super('Cannot remove verified creator')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, CannotRemoveVerifiedCreatorError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1772,
  () => new CannotRemoveVerifiedCreatorError()
)
createErrorFromNameLookup.set(
  'CannotRemoveVerifiedCreator',
  () => new CannotRemoveVerifiedCreatorError()
)

/**
 * CannotAddVerifiedCreator: 'Cannot add verified creator'
 *
 * @category Errors
 * @category generated
 */
export class CannotAddVerifiedCreatorError extends Error {
  readonly code: number = 0x1773
  readonly name: string = 'CannotAddVerifiedCreator'
  constructor() {
    super('Cannot add verified creator')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, CannotAddVerifiedCreatorError)
    }
  }
}

createErrorFromCodeLookup.set(0x1773, () => new CannotAddVerifiedCreatorError())
createErrorFromNameLookup.set(
  'CannotAddVerifiedCreator',
  () => new CannotAddVerifiedCreatorError()
)

/**
 * NoCollectionSet: 'Cannot verify a collection when one is not set'
 *
 * @category Errors
 * @category generated
 */
export class NoCollectionSetError extends Error {
  readonly code: number = 0x1774
  readonly name: string = 'NoCollectionSet'
  constructor() {
    super('Cannot verify a collection when one is not set')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, NoCollectionSetError)
    }
  }
}

createErrorFromCodeLookup.set(0x1774, () => new NoCollectionSetError())
createErrorFromNameLookup.set(
  'NoCollectionSet',
  () => new NoCollectionSetError()
)

/**
 * IncorrectCollectionAuthority: 'Incorrect collection authority'
 *
 * @category Errors
 * @category generated
 */
export class IncorrectCollectionAuthorityError extends Error {
  readonly code: number = 0x1775
  readonly name: string = 'IncorrectCollectionAuthority'
  constructor() {
    super('Incorrect collection authority')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, IncorrectCollectionAuthorityError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1775,
  () => new IncorrectCollectionAuthorityError()
)
createErrorFromNameLookup.set(
  'IncorrectCollectionAuthority',
  () => new IncorrectCollectionAuthorityError()
)

/**
 * CannotDeleteCollectionWithVerifiedItems: 'Collection has verified items. Cannot delete.'
 *
 * @category Errors
 * @category generated
 */
export class CannotDeleteCollectionWithVerifiedItemsError extends Error {
  readonly code: number = 0x1776
  readonly name: string = 'CannotDeleteCollectionWithVerifiedItems'
  constructor() {
    super('Collection has verified items. Cannot delete.')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(
        this,
        CannotDeleteCollectionWithVerifiedItemsError
      )
    }
  }
}

createErrorFromCodeLookup.set(
  0x1776,
  () => new CannotDeleteCollectionWithVerifiedItemsError()
)
createErrorFromNameLookup.set(
  'CannotDeleteCollectionWithVerifiedItems',
  () => new CannotDeleteCollectionWithVerifiedItemsError()
)

/**
 * SignerNotInCreatorArray: 'Signer not in creator array.'
 *
 * @category Errors
 * @category generated
 */
export class SignerNotInCreatorArrayError extends Error {
  readonly code: number = 0x1777
  readonly name: string = 'SignerNotInCreatorArray'
  constructor() {
    super('Signer not in creator array.')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, SignerNotInCreatorArrayError)
    }
  }
}

createErrorFromCodeLookup.set(0x1777, () => new SignerNotInCreatorArrayError())
createErrorFromNameLookup.set(
  'SignerNotInCreatorArray',
  () => new SignerNotInCreatorArrayError()
)

/**
 * AlreadySigned: 'This signer has already signed this metadata.'
 *
 * @category Errors
 * @category generated
 */
export class AlreadySignedError extends Error {
  readonly code: number = 0x1778
  readonly name: string = 'AlreadySigned'
  constructor() {
    super('This signer has already signed this metadata.')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, AlreadySignedError)
    }
  }
}

createErrorFromCodeLookup.set(0x1778, () => new AlreadySignedError())
createErrorFromNameLookup.set('AlreadySigned', () => new AlreadySignedError())

/**
 * MustDeleteOverrideFirst: 'Before deleting an NFT metadata, you must delete the override account first.'
 *
 * @category Errors
 * @category generated
 */
export class MustDeleteOverrideFirstError extends Error {
  readonly code: number = 0x1779
  readonly name: string = 'MustDeleteOverrideFirst'
  constructor() {
    super(
      'Before deleting an NFT metadata, you must delete the override account first.'
    )
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, MustDeleteOverrideFirstError)
    }
  }
}

createErrorFromCodeLookup.set(0x1779, () => new MustDeleteOverrideFirstError())
createErrorFromNameLookup.set(
  'MustDeleteOverrideFirst',
  () => new MustDeleteOverrideFirstError()
)

/**
 * MetadataIsNotMutable: 'Metadata is not mutable.'
 *
 * @category Errors
 * @category generated
 */
export class MetadataIsNotMutableError extends Error {
  readonly code: number = 0x177a
  readonly name: string = 'MetadataIsNotMutable'
  constructor() {
    super('Metadata is not mutable.')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, MetadataIsNotMutableError)
    }
  }
}

createErrorFromCodeLookup.set(0x177a, () => new MetadataIsNotMutableError())
createErrorFromNameLookup.set(
  'MetadataIsNotMutable',
  () => new MetadataIsNotMutableError()
)

/**
 * CannotSignNonNftMetadata: 'Cannot sign non-NFT metadata.'
 *
 * @category Errors
 * @category generated
 */
export class CannotSignNonNftMetadataError extends Error {
  readonly code: number = 0x177b
  readonly name: string = 'CannotSignNonNftMetadata'
  constructor() {
    super('Cannot sign non-NFT metadata.')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, CannotSignNonNftMetadataError)
    }
  }
}

createErrorFromCodeLookup.set(0x177b, () => new CannotSignNonNftMetadataError())
createErrorFromNameLookup.set(
  'CannotSignNonNftMetadata',
  () => new CannotSignNonNftMetadataError()
)

/**
 * CannotSignItemInNonNftCollection: 'Cannot sign item in non NFT collection.'
 *
 * @category Errors
 * @category generated
 */
export class CannotSignItemInNonNftCollectionError extends Error {
  readonly code: number = 0x177c
  readonly name: string = 'CannotSignItemInNonNftCollection'
  constructor() {
    super('Cannot sign item in non NFT collection.')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, CannotSignItemInNonNftCollectionError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x177c,
  () => new CannotSignItemInNonNftCollectionError()
)
createErrorFromNameLookup.set(
  'CannotSignItemInNonNftCollection',
  () => new CannotSignItemInNonNftCollectionError()
)

/**
 * NotNftCollection: 'Not NFT collection.'
 *
 * @category Errors
 * @category generated
 */
export class NotNftCollectionError extends Error {
  readonly code: number = 0x177d
  readonly name: string = 'NotNftCollection'
  constructor() {
    super('Not NFT collection.')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, NotNftCollectionError)
    }
  }
}

createErrorFromCodeLookup.set(0x177d, () => new NotNftCollectionError())
createErrorFromNameLookup.set(
  'NotNftCollection',
  () => new NotNftCollectionError()
)

/**
 * NotSplCollection: 'Not SPL collection.'
 *
 * @category Errors
 * @category generated
 */
export class NotSplCollectionError extends Error {
  readonly code: number = 0x177e
  readonly name: string = 'NotSplCollection'
  constructor() {
    super('Not SPL collection.')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, NotSplCollectionError)
    }
  }
}

createErrorFromCodeLookup.set(0x177e, () => new NotSplCollectionError())
createErrorFromNameLookup.set(
  'NotSplCollection',
  () => new NotSplCollectionError()
)

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 * @category generated
 */
export function errorFromCode(code: number): MaybeErrorWithCode {
  const createError = createErrorFromCodeLookup.get(code)
  return createError != null ? createError() : null
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 * @category generated
 */
export function errorFromName(name: string): MaybeErrorWithCode {
  const createError = createErrorFromNameLookup.get(name)
  return createError != null ? createError() : null
}
