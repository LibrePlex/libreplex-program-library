/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js'
import * as beet from '@metaplex-foundation/beet'
import * as beetSolana from '@metaplex-foundation/beet-solana'
import { RoyaltyShare, royaltyShareBeet } from './RoyaltyShare'

/**
 * Arguments used to create {@link CollectionNftData}
 * @category Accounts
 * @category generated
 */
export type CollectionNftDataArgs = {
  royaltyBps: number
  royaltyShares: RoyaltyShare[]
  permittedSigners: web3.PublicKey[]
}

export const collectionNftDataDiscriminator = [
  94, 252, 103, 212, 110, 24, 251, 237,
]
/**
 * Holds the data for the {@link CollectionNftData} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class CollectionNftData implements CollectionNftDataArgs {
  private constructor(
    readonly royaltyBps: number,
    readonly royaltyShares: RoyaltyShare[],
    readonly permittedSigners: web3.PublicKey[]
  ) {}

  /**
   * Creates a {@link CollectionNftData} instance from the provided args.
   */
  static fromArgs(args: CollectionNftDataArgs) {
    return new CollectionNftData(
      args.royaltyBps,
      args.royaltyShares,
      args.permittedSigners
    )
  }

  /**
   * Deserializes the {@link CollectionNftData} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0
  ): [CollectionNftData, number] {
    return CollectionNftData.deserialize(accountInfo.data, offset)
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link CollectionNftData} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
    commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig
  ): Promise<CollectionNftData> {
    const accountInfo = await connection.getAccountInfo(
      address,
      commitmentOrConfig
    )
    if (accountInfo == null) {
      throw new Error(`Unable to find CollectionNftData account at ${address}`)
    }
    return CollectionNftData.fromAccountInfo(accountInfo, 0)[0]
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey(
      'L1BRc7ZYjj7t9k7E5xbdnKy3KhaY6sTcJx4gAsqxUbh'
    )
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, collectionNftDataBeet)
  }

  /**
   * Deserializes the {@link CollectionNftData} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [CollectionNftData, number] {
    return collectionNftDataBeet.deserialize(buf, offset)
  }

  /**
   * Serializes the {@link CollectionNftData} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return collectionNftDataBeet.serialize({
      accountDiscriminator: collectionNftDataDiscriminator,
      ...this,
    })
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link CollectionNftData} for the provided args.
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   */
  static byteSize(args: CollectionNftDataArgs) {
    const instance = CollectionNftData.fromArgs(args)
    return collectionNftDataBeet.toFixedFromValue({
      accountDiscriminator: collectionNftDataDiscriminator,
      ...instance,
    }).byteSize
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link CollectionNftData} data from rent
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    args: CollectionNftDataArgs,
    connection: web3.Connection,
    commitment?: web3.Commitment
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      CollectionNftData.byteSize(args),
      commitment
    )
  }

  /**
   * Returns a readable version of {@link CollectionNftData} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      royaltyBps: this.royaltyBps,
      royaltyShares: this.royaltyShares,
      permittedSigners: this.permittedSigners,
    }
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const collectionNftDataBeet = new beet.FixableBeetStruct<
  CollectionNftData,
  CollectionNftDataArgs & {
    accountDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['royaltyBps', beet.u16],
    ['royaltyShares', beet.array(royaltyShareBeet)],
    ['permittedSigners', beet.array(beetSolana.publicKey)],
  ],
  CollectionNftData.fromArgs,
  'CollectionNftData'
)
